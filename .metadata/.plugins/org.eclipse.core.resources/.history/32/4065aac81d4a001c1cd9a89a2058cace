package com.app.util;

import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class SessionMap<K, V> extends ConcurrentHashMap<K, V> {

	private static final Map<String, String> SESSION = new HashMap<>();

	private static final long serialVersionUID = 3623356745496049442L;
	
	private TimeUnit timeUnit; 
	
	private long duration;
	
	public SessionMap() {
		timeUnit = TimeUnit.MINUTES; // 1s
		duration = 1;
	}
	
	public SessionMap(long duration, TimeUnit timeUnit) {
		this.timeUnit = timeUnit;
	}

	@Override
	public V get(Object key) {
		V value = super.get(key);
		if (SESSION.containsKey(key))
			return value;
		else
			return null;
	}
	
	@Override
	public V put(K key, V value) {
		TimerTask task = new TimerTask() {
			
			@Override
			public void run() {
				SESSION.remove(key);
			}
		};
		Timer timer = new Timer();
		timer.schedule(task, timeUnit.toMillis(1));
		SESSION.put(String.valueOf(key), String.valueOf(value));
		return super.put(key, value);
	}

}
